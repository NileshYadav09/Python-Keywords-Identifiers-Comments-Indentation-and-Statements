1.Explain the significance of Python keywords and provide examples of five keywords

Answer :- Every language contains words and a set of rules that would make a sentence meaningful. Similarly, in Python programming language there are a set of predefined words called Keywords which along with Identifiers will form meaningful sentences when used together. Python keywords cannot be used as the names of variables, functions, and classes.
Python Keywords are some predefined and reserved words in Python that have special meanings. Keywords are used to define the syntax of the coding. The keyword cannot be used as an identifier, function, or variable name. All the keywords in Python are written in lowercase except True and False.

Rules for Keywords in Python
Python keywords cannot be used as identifiers.
All the keywords in Python should be in lowercase except True and False.

Examples Of Keywords :-
a) and :-This is a logical operator which returns true if both the operands are true else returns false.
b) else :-Else is used with if and elif conditional statements. The else block is executed if the given condition is not true.
c) break :-This is used to terminate the loop.
d) lambda :-It is used to define the anonymous function.
e) return :-It will return a value and exit the function.



2. Describe the rules for defining identifiers in Python and provide an example

Answer :- Identifiers in Python is a names used to identify a variable, function, class, module, or other objects. An identifier can only contain letters, digits, and underscores, and cannot start with a digit. In Python, identifiers are case-sensitive, meaning that are and Are are considered to be two different identifiers.

Rules for Naming an Identifier
a) Identifiers cannot be a keyword.
b) Identifiers are case-sensitive.
c) It can have a sequence of letters and digits. ...
d) It's a convention to start an identifier with a letter rather _ .
e) Whitespaces are not allowed.
f) We cannot use special symbols like !, @, #, $, and so on.

Valid identifiers:

i)var1
ii)_var1
iii)_1_var
iv)var_1

invalid Identifiers

i)!var1
ii)1var
iii)1_var
iv)var#1
v)var 1


3. What are comments in Python, and why are they useful? Provide an example

Answer :-Comments in Python is the inclusion of short descriptions along with the code to increase its readability. A developer uses them to write his or her thought process while writing the code. It explains the basic logic behind why a particular line of code was written.
In Python, you write a comment using the '#' symbol. Comments are the programmer's notes that provide clarity about the code but are ignored by the Python interpreter.
 Here's a simple example: 
# This is a comment print('Hello, World! ') # Output: # Hello, World!


4. Why is proper indentation important in Python?

Answer:- If you're coding in Python, one of the most important things to remember is the proper indentation of your code. Good Python indentation is necessary to make your code readable and easy to understand, both for yourself and others who may read your code later.
 Indentation makes the code more readable by clearly indicating which statements belong to which block of code. This makes it easier for other developers to understand your code and makes it more maintainable
 Indentation helps structure your code, making it easier to understand. Well-placed spaces and line breaks create a visual hierarchy, highlighting code blocks, loops, and function definitions. Maintainability: Clean, properly formatted code is a breeze to maintain.


5. What happens if indentation is incorrect in Python?

Answer:- Python is a procedural language. The indentation error can occur when the spaces or tabs are not placed properly. There will not be an issue if the interpreter does not find any issues with the spaces or tabs. If there is an error due to indentation, it will come in between the execution and can be a show stopper.
 In Python, all the code that you type is arranged via correct whitespaces and therefore if at any instance you have a bad indentation, the overall code will not run and the interpreter will simply return an error function.


6. Differentiate between expression and statement in Python with examples

Answer:- Expression :- 
         An expression is any word or group of words or symbols that is a value. In programming, an expression is a value, or anything that executes and ends up being a value.
         It is necessary to understand that a value is unique. For example, const, let, 2, 4, s, a, true, false, and world are values because each of them is unique in meaning or
         character.
         
         Eg :- const price = 500;
               From the code above, const, price, =, and 500 are expressions because each of them has a definite and unique meaning or value. But if we take all of them together,
               const  price = 500 - then we have a statement.                  


           Statement :-
           A statement is a group of expressions and/or statements that you design to carry out a task or an action.
           Statements are two-sided â€“ that is, they either do tasks or don't do them. Any statement that can return a value is automatically qualified to be used as an expression.

           Eg :- let amount = $2000;
           The whole of the code above is a statement because it carries out the task of assigning $2000 to amount. It is safe to say a line of code is a statement because most compilers
           or interpreters don't execute any standalone expression.























